class Node {
  constructor(data) {
    this.data = data;
    this.left = null;
    this.right = null;
  }
}

let root = new Node(5);
root.left = new Node(3);
root.right = new Node(7);
root.left.left = new Node(2);
root.left.right = new Node(4);
root.right.left = new Node(6);
root.right.right = new Node(8);

// iterative min and max finding in BST

function findMin(root) {
  if (root===null) return -1;
  while(root.left) {
    root = root.left;
  }
  return root.data;
}

function findMax(root) {
  if (root===null) return -1;
  while(root.right) {
    root = root.right;
  }
  return root.data;
}

console.log(findMin(root));
console.log(findMax(root));


// recursive min and max finding in BST

function findMinRec(root) {
  if (root===null) return 'Root is null';
  else if (root.left === null) return root.data;
  return findMinRec(root.left);
}

function findMaxRec(root) {
  if (root===null) return 'Root is null';
  else if (root.right === null) return root.data;
  return findMaxRec(root.right);
}

console.log(findMinRec(root));
console.log(findMaxRec(root));
